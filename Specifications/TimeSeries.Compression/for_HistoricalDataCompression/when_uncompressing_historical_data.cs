/*---------------------------------------------------------------------------------------------
 *  Copyright (c) RaaLabs. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
using System.Linq;
using Machine.Specifications;
using System.IO;
using Moq;
using It = Machine.Specifications.It;
using System.Text;
using System.Collections.Generic;

namespace RaaLabs.TimeSeries.Compression
{
    public class when_uncompressing_historical_data
    {
        static byte[] encodedData = new byte[]
        {
            0x84, 0x01, 0x00, 0x00, 0x0a, 0x10, 0x77, 0x9e, 0x4a, 0x9d, 0xca, 0x91, 0x86, 0x48, 0x89, 0x89, 0x49, 0xc6, 0x7d, 0x87, 0x56, 0x83, 0x10, 0xbf,
            0xff, 0xb2, 0xcd, 0xb0, 0x2e, 0x22, 0xe8, 0x02, 0x78, 0xda, 0xb5, 0xcf, 0xc1, 0x47, 0x04, 0x71, 0x14, 0x07, 0xf0, 0x9f, 0x56, 0xca, 0x4f, 0xa4,
            0x0c, 0x29, 0x19, 0xb2, 0x64, 0x56, 0xac, 0x18, 0x91, 0xec, 0xef, 0xbd, 0x2c, 0x19, 0x12, 0xd9, 0x15, 0x2b, 0x46, 0xa4, 0x8c, 0x58, 0x32, 0x64,
            0xc9, 0x26, 0xba, 0x8c, 0xe8, 0x32, 0x51, 0x97, 0x3d, 0xd4, 0x65, 0xf6, 0xd0, 0x69, 0xc4, 0x5e, 0xe6, 0xd2, 0x65, 0x2e, 0x5d, 0x66, 0x0f, 0x9d,
            0xe6, 0xd2, 0x65, 0x2e, 0x5d, 0xe6, 0xd2, 0xe5, 0xd7, 0xa1, 0x53, 0xdf, 0x7f, 0xa2, 0x77, 0xf9, 0xf1, 0xfc, 0xde, 0xf7, 0xf3, 0xde, 0xf4, 0xd3,
            0xed, 0x68, 0xfc, 0x5a, 0x9f, 0x3f, 0x15, 0xf2, 0xff, 0x6b, 0xe9, 0xa1, 0x22, 0xef, 0x2b, 0x02, 0x25, 0xf3, 0x6a, 0x43, 0xe6, 0x51, 0x23, 0x4c,
            0x35, 0xde, 0xaa, 0xca, 0xb2, 0x3d, 0x15, 0xa6, 0x3d, 0x55, 0x73, 0x43, 0x85, 0xbe, 0x2a, 0x5b, 0x09, 0x7a, 0x99, 0x8a, 0x9d, 0x02, 0x7d, 0xad,
            0x12, 0x73, 0x92, 0x6a, 0xee, 0x2c, 0x0d, 0x06, 0x8b, 0x84, 0xff, 0x74, 0x65, 0xd4, 0xa9, 0x6c, 0x6d, 0x92, 0x1b, 0x36, 0x09, 0xb3, 0xa4, 0x64,
            0x87, 0x62, 0xe7, 0x98, 0xcc, 0xa0, 0x4b, 0xc8, 0x21, 0x21, 0x6e, 0x28, 0x31, 0x03, 0xf2, 0xd5, 0x1d, 0xe6, 0x42, 0x2a, 0xfa, 0x8f, 0x98, 0x1d,
            0x50, 0x3b, 0x79, 0xc6, 0x7c, 0x44, 0xa9, 0x7e, 0x41, 0x46, 0x4c, 0xb6, 0x3d, 0x42, 0x4e, 0x42, 0x43, 0xff, 0x0d, 0x59, 0x29, 0x19, 0xf1, 0x3b,
            0xf2, 0x32, 0x0a, 0xca, 0x0f, 0x64, 0xe6, 0xa4, 0xad, 0x4f, 0xe4, 0x16, 0xe4, 0x79, 0x5f, 0xc8, 0x2e, 0x29, 0x8f, 0xbe, 0x91, 0xaf, 0xc9, 0x29,
            0x7e, 0x61, 0x08, 0x76, 0xc3, 0x09, 0xc6, 0x6e, 0x6c, 0xc4, 0x53, 0xec, 0x2b, 0xc9, 0xe3, 0x6c, 0x86, 0xb1, 0x27, 0x07, 0xe5, 0x1c, 0x17, 0x7d,
            0x83, 0x95, 0x5c, 0x60, 0xec, 0xcc, 0x3f, 0xd6, 0x32, 0xb7, 0x13, 0x93, 0x63, 0x67, 0x85, 0xb1, 0x3f, 0x7b, 0xde, 0x2a, 0xa7, 0xda, 0x62, 0x33,
            0x58, 0x63, 0xdc, 0xc2, 0x79, 0xb4, 0xce, 0xb6, 0x6d, 0x73, 0x98, 0x6e, 0x30, 0xee, 0x62, 0xa7, 0xd8, 0xe2, 0xa1, 0xaf, 0x58, 0x88, 0x6d, 0x18,
            0x4d, 0x18, 0x3b, 0x30, 0x1c, 0x18, 0xbb, 0x8c, 0x7b, 0x61, 0xec, 0xc3, 0x68, 0xc1, 0x38, 0x80, 0xd1, 0x81, 0x71, 0xc8, 0xda, 0x72, 0x61, 0x1c,
            0xc1, 0x38, 0x86, 0x71, 0x02, 0xc3, 0x83, 0x71, 0x06, 0xa3, 0x0b, 0xe3, 0x1c, 0x86, 0x0f, 0xe3, 0x02, 0x46, 0x0f, 0xc6, 0x25, 0x8c, 0x3e, 0x47,
            0xfe, 0x35, 0xff, 0x01, 0xc9, 0x50, 0xa9, 0xfa, 0xe2, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x77, 0x9e, 0x4a, 0x9d, 0xca, 0x91, 0x86, 0x48, 0x89, 0x89,
            0x49, 0xc6, 0x7d, 0x87, 0x56, 0x83, 0x10, 0xa7, 0x87, 0xb3, 0xcd, 0xb0, 0x2e, 0x22, 0xc6, 0x01, 0x78, 0xda, 0x95, 0xcd, 0x2d, 0x0f, 0x01, 0x71,
            0x00, 0x07, 0xe0, 0xbf, 0x66, 0x17, 0x4d, 0x12, 0x4e, 0xa5, 0x08, 0x64, 0xfb, 0x45, 0x99, 0x2c, 0xcb, 0x32, 0xc5, 0xcb, 0x0e, 0xc3, 0x1c, 0xc3,
            0x38, 0xc3, 0xbc, 0x33, 0xec, 0x30, 0xcc, 0x31, 0x04, 0xc9, 0x86, 0x2c, 0xcb, 0x32, 0xd9, 0xef, 0x2b, 0x78, 0xbe, 0xc0, 0x63, 0x2e, 0xe5, 0xd6,
            0x8f, 0xa5, 0xcb, 0xe2, 0x16, 0xd2, 0xbf, 0x6c, 0x37, 0x93, 0x74, 0x35, 0x09, 0x11, 0x83, 0xee, 0x8b, 0x23, 0xa8, 0x26, 0x20, 0x3d, 0x93, 0x30,
            0x64, 0x05, 0xa1, 0x50, 0x0a, 0x56, 0x3d, 0x8d, 0xcb, 0x27, 0x83, 0xb0, 0x37, 0x0b, 0xbb, 0x92, 0xc3, 0xe3, 0x9e, 0x47, 0xd4, 0x5a, 0x80, 0x33,
            0xa8, 0xe2, 0xd9, 0x2f, 0x42, 0x79, 0x97, 0xe0, 0xf1, 0x94, 0xf1, 0x8a, 0x54, 0xa0, 0x5e, 0xaa, 0xf0, 0x4a, 0x35, 0xbc, 0xfd, 0x75, 0x68, 0x9a,
            0x06, 0xdf, 0xab, 0x81, 0xaf, 0xa3, 0x89, 0x41, 0xb8, 0x85, 0x80, 0xd1, 0x86, 0x10, 0x1d, 0x1e, 0x5d, 0x1e, 0x3d, 0x1e, 0x7d, 0x1e, 0x43, 0x1e,
            0x23, 0x1e, 0x63, 0x1e, 0x13, 0x1e, 0x53, 0xc8, 0xca, 0x8c, 0xc7, 0x9c, 0x87, 0xce, 0x63, 0xc1, 0x63, 0xc9, 0x63, 0xc5, 0x63, 0xcd, 0x63, 0xc3,
            0x63, 0xcb, 0x63, 0xc7, 0xc3, 0xe0, 0xb1, 0xe7, 0x71, 0xc0, 0xc7, 0x71, 0xe4, 0x71, 0xe2, 0x71, 0xc6, 0x0f, 0x52, 0xc6, 0x62, 0x9c, 0x9e, 0x00,
            0x00, 0x00, 0x0a, 0x10, 0x77, 0x9e, 0x4a, 0x9d, 0xca, 0x91, 0x86, 0x48, 0x89, 0x89, 0x49, 0xc6, 0x7d, 0x87, 0x56, 0x83, 0x10, 0x9b, 0x8b, 0xb3,
            0xcd, 0xb0, 0x2e, 0x22, 0x82, 0x01, 0x78, 0xda, 0xe3, 0xe8, 0xee, 0xdd, 0x7c, 0x76, 0x83, 0x9e, 0x90, 0x24, 0x03, 0x17, 0x0e, 0x20, 0x95, 0xc6,
            0x95, 0xc2, 0xc0, 0x70, 0xc0, 0x7e, 0x9d, 0xfb, 0x41, 0xfb, 0x98, 0xfe, 0x43, 0xf6, 0x5c, 0xd7, 0x0f, 0xdb, 0xef, 0x90, 0x3b, 0x6a, 0x9f, 0x96,
            0x76, 0xcc, 0x5e, 0x64, 0xdd, 0x71, 0xfb, 0x43, 0x5f, 0x4f, 0xd8, 0x17, 0xd8, 0x9e, 0xb2, 0x97, 0x6b, 0x3d, 0x6d, 0x7f, 0xe6, 0xcc, 0x19, 0xfb,
            0x6a, 0x91, 0x73, 0xf6, 0x9a, 0x31, 0xe7, 0xed, 0xaf, 0x2f, 0xbe, 0x60, 0xdf, 0xfa, 0xfa, 0xa2, 0xbd, 0xb1, 0xf1, 0x65, 0xfb, 0x87, 0x55, 0x57,
            0xec, 0xfb, 0x0f, 0x5d, 0xb5, 0xb7, 0xe5, 0xba, 0x6e, 0xff, 0x3a, 0xf0, 0x86, 0xfd, 0xcc, 0x99, 0x37, 0xed, 0xdd, 0x1f, 0xde, 0xb2, 0xff, 0xaa,
            0x71, 0xc7, 0x7e, 0x49, 0xc1, 0x5d, 0xfb, 0xa0, 0x1d, 0xf7, 0xec, 0x01, 0x37, 0xe1, 0x37, 0xcf
        };

        static List<DataPoint<dynamic>> uncompressedData;

        Establish context = () => { };

        Because of = () => {
            uncompressedData = HistoricalDataCompression.Decompress(encodedData).ToList();
        };

        It should_uncompress_the_correct_number_of_data_points = () => uncompressedData.Count.ShouldEqual(175);
    }
}